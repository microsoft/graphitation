"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2268],{2379:(e,i,s)=>{s.r(i),s.d(i,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"packages/apollo-react-relay-duct-tape/use-subscription","title":"useSubscription","description":"API reference for useSubscription, a React hook used to subscribe and unsubscribe from a subscription","source":"@site/docs/packages/apollo-react-relay-duct-tape/use-subscription.md","sourceDirName":"packages/apollo-react-relay-duct-tape","slug":"/packages/apollo-react-relay-duct-tape/use-subscription","permalink":"/graphitation/docs/packages/apollo-react-relay-duct-tape/use-subscription","draft":false,"unlisted":false,"editUrl":"https://github.com/microsoft/graphitation/tree/main/website/docs/packages/apollo-react-relay-duct-tape/use-subscription.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7,"id":"use-subscription","title":"useSubscription","description":"API reference for useSubscription, a React hook used to subscribe and unsubscribe from a subscription","keywords":["subscription"]},"sidebar":"tutorialSidebar","previous":{"title":"useMutation","permalink":"/graphitation/docs/packages/apollo-react-relay-duct-tape/use-mutation"}}');var r=s(4848),t=s(8453);const o={sidebar_position:7,id:"use-subscription",title:"useSubscription",description:"API reference for useSubscription, a React hook used to subscribe and unsubscribe from a subscription",keywords:["subscription"]},c=void 0,a={},l=[{value:"<code>useSubscription</code>",id:"usesubscription",level:2},{value:"Arguments",id:"arguments",level:3},{value:"Type <code>GraphQLSubscriptionConfig&lt;TSubscriptionPayload&gt;</code>",id:"type-graphqlsubscriptionconfigtsubscriptionpayload",level:4},{value:"Flow Type Parameters",id:"flow-type-parameters",level:3},{value:"Behavior",id:"behavior",level:3}];function d(e){const i={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(i.p,{children:["\u26a0\ufe0f ",(0,r.jsx)(i.em,{children:"NOTE: This document still needs to be updated for Apollo React/Relay Duct-Tape."})]}),"\n",(0,r.jsx)(i.h2,{id:"usesubscription",children:(0,r.jsx)(i.code,{children:"useSubscription"})}),"\n",(0,r.jsx)(i.p,{children:"Hook used to subscribe and unsubscribe to a subscription."}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-js",children:"import {graphql, useSubscription} from 'react-relay';\nimport {useMemo} from 'react';\n\nconst subscription = graphql`\n  subscription UserDataSubscription($input: InputData!) {\n    # ...\n  }\n`;\n\nfunction UserComponent({ id }) {\n  // IMPORTANT: your config should be memoized.\n  // Otherwise, useSubscription will re-render too frequently.\n  const config = useMemo(() => ({\n    variables: {id},\n    subscription,\n  }), [id, subscription]);\n\n  useSubscription(config);\n\n  return (/* ... */);\n}\n"})}),"\n",(0,r.jsx)(i.h3,{id:"arguments",children:"Arguments"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"config"}),": a config of type ",(0,r.jsx)(i.a,{href:"#type-graphqlsubscriptionconfigtsubscriptionpayload",children:(0,r.jsx)(i.code,{children:"GraphQLSubscriptionConfig"})})," passed to ",(0,r.jsx)(i.a,{href:"../request-subscription/",children:(0,r.jsx)(i.code,{children:"requestSubscription"})})]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"requestSubscriptionFn"}),": ",(0,r.jsx)(i.code,{children:"?<TSubscriptionPayload>(IEnvironment, GraphQLSubscriptionConfig<TSubscriptionPayload>) => Disposable"}),". An optional function with the same signature as ",(0,r.jsx)(i.a,{href:"../request-subscription/",children:(0,r.jsx)(i.code,{children:"requestSubscription"})}),", which will be called in its stead. Defaults to ",(0,r.jsx)(i.code,{children:"requestSubscription"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(i.h4,{id:"type-graphqlsubscriptionconfigtsubscriptionpayload",children:["Type ",(0,r.jsx)(i.code,{children:"GraphQLSubscriptionConfig<TSubscriptionPayload>"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["An object with the following fields:","\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"cacheConfig"}),": ",(0,r.jsx)(i.em,{children:(0,r.jsx)(i.em,{children:"[Optional]"})})," ",(0,r.jsx)(i.a,{href:"#type-cacheconfig",children:(0,r.jsx)(i.code,{children:"CacheConfig"})})]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"subscription"}),": ",(0,r.jsx)(i.code,{children:"GraphQLTaggedNode"}),". A GraphQL subscription specified using a ",(0,r.jsx)(i.code,{children:"graphql"})," template literal"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"variables"}),": The variables to pass to the subscription"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"onCompleted"}),": ",(0,r.jsx)(i.em,{children:(0,r.jsx)(i.em,{children:"[Optional]"})})," ",(0,r.jsx)(i.code,{children:"() => void"}),". An optional callback that is executed when the subscription is established"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"onError"}),": ",(0,r.jsx)(i.em,{children:(0,r.jsx)(i.em,{children:"[Optional]"})})," ",(0,r.jsx)(i.code,{children:"(Error) => {}"}),". An optional callback that is executed when an error occurs"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"onNext"}),": ",(0,r.jsx)(i.em,{children:(0,r.jsx)(i.em,{children:"[Optional]"})})," ",(0,r.jsx)(i.code,{children:"(TSubscriptionPayload) => {}"}),". An optional callback that is executed when new data is received"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"updater"}),": ",(0,r.jsx)(i.em,{children:(0,r.jsx)(i.em,{children:"[Optional]"})})," ",(0,r.jsx)(i.a,{href:"#type-selectorstoreupdater",children:(0,r.jsx)(i.code,{children:"SelectorStoreUpdater"})}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"flow-type-parameters",children:"Flow Type Parameters"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"TSubscriptionPayload"}),": The type of the payloads vended by the subscription. You should pass the flow type imported from the auto-generated ",(0,r.jsx)(i.code,{children:".graphql"})," file corresponding to the subscription, e.g. use ",(0,r.jsx)(i.code,{children:"UserDataSubscription"})," as the type parameter, from ",(0,r.jsx)(i.code,{children:"import type {UserDataSubscription} from './__generated__/UserDataSubscription.graphql'"}),";"]}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"behavior",children:"Behavior"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["This is only a thin wrapper around the ",(0,r.jsx)(i.code,{children:"requestSubscription"})," API. It will:","\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Subscribe when the component is mounted with the given config"}),"\n",(0,r.jsx)(i.li,{children:"Unsubscribe when the component is unmounted"}),"\n",(0,r.jsxs)(i.li,{children:["Unsubscribe and resubscribe with new values if the environment, config or ",(0,r.jsx)(i.code,{children:"requestSubscriptionFn"})," changes."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(i.li,{children:["If you have the need to do something more complicated, such as imperatively requesting a subscription, please use the ",(0,r.jsx)(i.a,{href:"../request-subscription/",children:(0,r.jsx)(i.code,{children:"requestSubscription"})})," API directly."]}),"\n",(0,r.jsxs)(i.li,{children:["See the ",(0,r.jsx)(i.a,{href:"../../guided-tour/updating-data/graphql-subscriptions/",children:"GraphQL Subscriptions Guide"})," for a more detailed explanation of how to work with subscriptions."]}),"\n"]})]})}function u(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);