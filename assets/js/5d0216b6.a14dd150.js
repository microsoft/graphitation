"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6579],{556:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/Slide22-f6c232cb7962e56d6365e81d40c0f031.png"},827:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/Slide14-0d8974bc92a64288e8d3967041ae1af5.png"},1102:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/Slide19-e01a363fe393519d687fb9dbb80d7fee.png"},1133:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>r,default:()=>l,frontMatter:()=>o,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"learn-graphql/guides/the-design-of-graphql","title":"The design of GraphQL","description":"What was GraphQL designed to solve for and how to leverage that?","source":"@site/docs/learn-graphql/guides/the-design-of-graphql.md","sourceDirName":"learn-graphql/guides","slug":"/learn-graphql/guides/the-design-of-graphql","permalink":"/graphitation/docs/learn-graphql/guides/the-design-of-graphql","draft":false,"unlisted":false,"editUrl":"https://github.com/microsoft/graphitation/tree/main/website/docs/learn-graphql/guides/the-design-of-graphql.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"id":"the-design-of-graphql","title":"The design of GraphQL","description":"What was GraphQL designed to solve for and how to leverage that?"},"sidebar":"tutorialSidebar","previous":{"title":"Thinking in GraphQL","permalink":"/graphitation/docs/learn-graphql/guides/thinking-in-graphql"},"next":{"title":"GraphQL Execution","permalink":"/graphitation/docs/learn-graphql/guides/graphql-execution"}}');var i=t(4848),s=t(8453);const o={sidebar_position:3,id:"the-design-of-graphql",title:"The design of GraphQL",description:"What was GraphQL designed to solve for and how to leverage that?"},r="The design of GraphQL",h={},d=[{value:"Example",id:"example",level:2},{value:"Problem",id:"problem",level:2},{value:"The Solution",id:"the-solution",level:2},{value:"Composition",id:"composition",level:3},{value:"Local Reasoning",id:"local-reasoning",level:3},{value:"Global Optimization",id:"global-optimization",level:3},{value:"Takeaways",id:"takeaways",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"the-design-of-graphql",children:"The design of GraphQL"})}),"\n",(0,i.jsxs)(n.p,{children:["Unfortunately, the community has largely lost sight of the original design considerations that Facebook had for GraphQL. Key components of its design are misunderstood and often entirely ignored by popular GraphQL clients. Facebook\u2019s own GraphQL client, ",(0,i.jsx)(n.a,{href:"https://relay.dev",children:"Relay"}),", incorporates all the GraphQL best-practices learned from using GraphQL ",(0,i.jsx)(n.em,{children:"as it was designed"}),", but alas the choice was made to separate the strong opinions of how to use GraphQL from GraphQL\u2019s own documentation to avoid being prescriptive."]}),"\n",(0,i.jsx)(n.admonition,{type:"danger",children:(0,i.jsxs)(n.p,{children:["Any GraphQL client for data-driven UI applications that does ",(0,i.jsx)(n.strong,{children:"not"})," have a strong opinion on making \u201cfragments\u201d the unit around which the user-interface components are built, is ",(0,i.jsx)(n.strong,{children:"not"})," leveraging key GraphQL design components nor setting you up for success with complex data-driven UI applications."]})}),"\n",(0,i.jsx)(n.p,{children:"With that in mind, forget what you might already know about GraphQL for a bit and let\u2019s go back to when Facebook designed GraphQL\u2014when they had realized that user-interfaces and the back-end services backing them would end up getting coupled together, making iterating on complex applications like theirs extremely hard."}),"\n",(0,i.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,i.jsxs)(n.p,{children:["Let\u2019s take a look at the ",(0,i.jsx)(n.code,{children:"ChatList"})," component of Teams. There\u2019s a list of conversations, content preview, and some details about the participants. So if we would structure this, there would be 3 major components."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["There\u2019s going to be the outer ",(0,i.jsx)(n.code,{children:"ChatList"})," component."]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"ChatList"})," component would contain many ",(0,i.jsx)(n.code,{children:"ChatListItem"})," components, one for each conversation that the user has."]}),"\n",(0,i.jsxs)(n.li,{children:["And for each conversation we render some ",(0,i.jsx)(n.code,{children:"ConversationInfo"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:t(7416).A+"",width:"1440",height:"810"})}),"\n",(0,i.jsx)(n.p,{children:"So our application looks something like this. We have our tree of components on the client-side, and we have our service endpoint."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:t(3823).A+"",width:"1440",height:"810"})}),"\n",(0,i.jsxs)(n.p,{children:["The service sends some data down to the client, ",(0,i.jsx)(n.code,{children:"ChatList"})," passes it on to its children, and we populate the data further down through the tree."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:t(6886).A+"",width:"1440",height:"810"})}),"\n",(0,i.jsx)(n.h2,{id:"problem",children:"Problem"}),"\n",(0,i.jsxs)(n.p,{children:["But of course this is a simplification, what happens when we add some color to this? The ",(0,i.jsx)(n.code,{children:"ChatList"})," component needs an item count, the ",(0,i.jsx)(n.code,{children:"ChatListItem"})," component needs an avatar, and the ",(0,i.jsx)(n.code,{children:"ConversationInfo"})," needs a title and last message preview."]}),"\n",(0,i.jsxs)(n.p,{children:["If we look at what\u2019s actually happening here, we\u2019ve encoded the implementation details of all 3 of our components on the service-side, so it knows what data to pass down.\nFurthermore, if we look at ",(0,i.jsx)(n.code,{children:"ConversationInfo"}),", we have actually leaked its details into ",(0,i.jsx)(n.code,{children:"ChatListItem"}),", because it has to know what to pass down as props."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:t(6964).A+"",width:"1440",height:"810"})}),"\n",(0,i.jsxs)(n.p,{children:["So what happens when we change ",(0,i.jsx)(n.code,{children:"ConversationInfo"}),"? Well, we\u2019re not just changing ",(0,i.jsx)(n.code,{children:"ConversationInfo"}),", we\u2019re also changing ",(0,i.jsx)(n.code,{children:"ChatListItem"})," and what it passes down. We might have to change ",(0,i.jsx)(n.code,{children:"ChatList"}),", depending on how it structured things. And we ",(0,i.jsx)(n.em,{children:"certainly"})," have to change the service, so that it sends the new information."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:t(827).A+"",width:"1440",height:"810"})}),"\n",(0,i.jsxs)(n.p,{children:["How did we get here? How did we get to a place where making a simple change to ",(0,i.jsx)(n.code,{children:"ConversationInfo"}),", required us not just to touch that component, but to touch its parents\u2014which are potentially many, in a complex application\u2014and to touch the service?"]}),"\n",(0,i.jsxs)(n.p,{children:["The big problem was a lack of modularity. We wanted ",(0,i.jsx)(n.code,{children:"ConversationInfo"})," to be a self-contained component, but it wasn\u2019t. Its implementation details were leaked to ",(0,i.jsx)(n.code,{children:"ChatListItem"}),", ",(0,i.jsx)(n.em,{children:"and"})," up to the service. The thing that was missing was a way for ",(0,i.jsx)(n.code,{children:"ConversationInfo"})," and other components to specify what data they require. That specification didn\u2019t live in the component itself, it was spread all over the application."]}),"\n",(0,i.jsx)(n.h2,{id:"the-solution",children:"The Solution"}),"\n",(0,i.jsx)(n.p,{children:"What we want is some way for each component to statically define its data needs in a simple way."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:t(3591).A+"",width:"1440",height:"810"})}),"\n",(0,i.jsx)(n.p,{children:"And if it can do so in a way that each of its parents can gather up those data needs\u2026"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:t(1102).A+"",width:"1440",height:"810"})}),"\n",(0,i.jsxs)(n.p,{children:["\u2026we can gather up the data requirements ",(0,i.jsx)(n.em,{children:"all"})," the way up the stack to the root."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:t(1822).A+"",width:"1440",height:"810"})}),"\n",(0,i.jsx)(n.p,{children:"The root component can then communicate that up to the service. And instead of the service having these data requirements hardcoded, the service can use this aggregated data specification to decide what data to send back to the client."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:t(556).A+"",width:"1440",height:"810"})}),"\n",(0,i.jsxs)(n.p,{children:["From here on out, it\u2019s exactly the same diagram as before. We have a service, the service has the data that our application needs, it sends it to ",(0,i.jsx)(n.code,{children:"ChatList"}),", ",(0,i.jsx)(n.code,{children:"ChatList"})," passes it down to the children, and so forth."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:t(4163).A+"",width:"1440",height:"810"})}),"\n",(0,i.jsxs)(n.p,{children:["It\u2019s a subtle change, but a ",(0,i.jsx)(n.em,{children:"key"})," one."]}),"\n",(0,i.jsxs)(n.p,{children:["We\u2019ve taken the details about what data ",(0,i.jsx)(n.code,{children:"ConversationInfo"})," requires ",(0,i.jsx)(n.em,{children:"out"})," of the service, where it doesn\u2019t belong, and have put it ",(0,i.jsx)(n.em,{children:"in"})," the ",(0,i.jsx)(n.code,{children:"ConversationInfo"})," component where it does."]}),"\n",(0,i.jsxs)(n.p,{children:["Because inherently, our rendering logic for ",(0,i.jsx)(n.code,{children:"ConversationInfo"})," and its data-specifications are tied together. We can\u2019t change one without changing the other. So having them both be in the same component makes life a lot easier."]}),"\n",(0,i.jsx)(n.p,{children:"So if we want to do this, if we want each component to be able to specify its own data needs, how can we do so? The realization is that our data-specification has a key property that it needs to fulfill, which is composition."}),"\n",(0,i.jsx)(n.h3,{id:"composition",children:"Composition"}),"\n",(0,i.jsx)(n.p,{children:"Composition in GraphQL is achieved by leveraging fragments, which are snippets of a query that can be composed together to form larger queries. These fragments are co-located with their components and composed into a tree that very much follows the shape of the component tree."}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["A good way to think about this, is that in a component\u2019s fragment you select exactly and only the data that ",(0,i.jsx)(n.em,{children:"this"})," component needs to render. These are either properties the component renders directly, needs to pass to components not backed by GraphQL data (such as very basic controls), or a fragment spread for components it renders that are backed by GraphQL data."]})}),"\n",(0,i.jsxs)(n.p,{children:["In the following React code samples, each component defines the exact properties it needs in a GraphQL fragment, and then for any child components it spreads [read: refers to] the fragment belonging to that component. It knows that it has children with data dependencies, but it doesn't ",(0,i.jsx)(n.em,{children:"need"})," to care about the details of that data."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"function ChatList() {\n  const data = useLazyLoadQuery(\n    graphql`\n      query ChatListQuery {\n        conversations {\n          id\n          ...ChatListItemFragment\n        }\n      }\n    `,\n  );\n  return (\n    <ul>\n      {data.conversations.map((conversation) => (\n        <ChatListItem conversation={conversation} key={conversation.id} />\n      ))}\n    </ul>\n  );\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"function ChatListItem(props) {\n  const conversation = useFragment(\n    graphql`\n      fragment ChatListItemFragment on Conversation {\n        lastMessage {\n          arrivalTime\n          ...ConversationInfoFragment\n        }\n      }\n    `,\n    props.conversation,\n  );\n  return (\n    <li>\n      <ConversationInfo conversation={conversation} />\n      <span>{conversation.lastMessage.arrivalTime}</span>\n    </li>\n  );\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"function ConversationInfo(props) {\n  const conversation = useFragment(\n    graphql`\n      fragment ConversationInfoFragment on Conversation {\n        title\n        lastMessage {\n          preview\n        }\n      }\n    `,\n    props.conversation,\n  );\n  return (\n    <div>\n      <h2>{conversation.title}</h2>\n      <p>{conversation.lastMessage.preview}</p>\n    </div>\n  );\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"local-reasoning",children:"Local Reasoning"}),"\n",(0,i.jsx)(n.p,{children:"Because a component and its data requirements are self-contained:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Engineers don\u2019t need to jump around the codebase"}),"\n",(0,i.jsx)(n.li,{children:"Engineers can safely cleanup data requirements"}),"\n",(0,i.jsx)(n.li,{children:"Isolated components can be re-composed into new features"}),"\n",(0,i.jsx)(n.li,{children:"Isolated components provide improved developer-experience"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"global-optimization",children:"Global Optimization"}),"\n",(0,i.jsx)(n.p,{children:"At the framework level, transparently to the UI engineer, we can:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use tooling to extract and optimize query"}),"\n",(0,i.jsx)(n.li,{children:"Fetch data in single request for a single render pass"}),"\n",(0,i.jsxs)(n.li,{children:["Start fetching data ",(0,i.jsx)(n.em,{children:"before"})," rendering. For instance at application launch, or when hovering over/near an element"]}),"\n",(0,i.jsx)(n.li,{children:"Leverage component fragments for narrow store observables, to avoid unnecessary re-rendering of ancestor/sibling components"}),"\n",(0,i.jsx)(n.li,{children:"Couple lazy asset loading to data resolving, including the required components themselves"}),"\n",(0,i.jsx)(n.li,{children:"Move extracted queries upstream so the pipeline can ahead-of-time optimize/prepare data in a generic manner across builds"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"takeaways",children:"Takeaways"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["GraphQL was created to allow composition of data-requirements for UI components in complex data-driven applications.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Smaller network payloads is great, but not the primary design goal."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Fragments are the manner in which a component's unique data-requirements can be composed.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"They are not meant simply for DRY purposes, nor should they be shared by different components."}),"\n"]}),"\n"]}),"\n"]})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},1822:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/Slide20-6385aadfe571f12db3fb937dbe338460.png"},3591:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/Slide18-96d1b3db202e1a31aac06dee03e7b958.png"},3823:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/Slide10-1298febd4fd724fbd900e8c1b52a62a2.png"},4163:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/Slide25-425ae0858073a3d304499d21b370a9e4.png"},6886:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/Slide11-fc704ce0a6249d9e7772991628f1467b.png"},6964:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/Slide13-b2f8c27204e307316722d047dcc219aa.png"},7416:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/Slide7+8+9-e961e765b175dddb6e4a59dc8fe627dc.png"}}]);