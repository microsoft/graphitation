"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1986],{9472:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"packages/apollo-react-relay-duct-tape/use-fragment","title":"useFragment","description":"API reference for useFragment, a React hook used to read fragment data from the Relay store using a fragment reference","source":"@site/docs/packages/apollo-react-relay-duct-tape/use-fragment.md","sourceDirName":"packages/apollo-react-relay-duct-tape","slug":"/packages/apollo-react-relay-duct-tape/use-fragment","permalink":"/graphitation/docs/packages/apollo-react-relay-duct-tape/use-fragment","draft":false,"unlisted":false,"editUrl":"https://github.com/microsoft/graphitation/tree/main/website/docs/packages/apollo-react-relay-duct-tape/use-fragment.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"id":"use-fragment","title":"useFragment","description":"API reference for useFragment, a React hook used to read fragment data from the Relay store using a fragment reference","keywords":["fragment","read","fragment reference"]},"sidebar":"tutorialSidebar","previous":{"title":"useLazyLoadQuery","permalink":"/graphitation/docs/packages/apollo-react-relay-duct-tape/use-lazy-load-query"},"next":{"title":"useRefetchableFragment","permalink":"/graphitation/docs/packages/apollo-react-relay-duct-tape/use-refetchable-fragment"}}');var n=a(4848),s=a(8453);const o={sidebar_position:3,id:"use-fragment",title:"useFragment",description:"API reference for useFragment, a React hook used to read fragment data from the Relay store using a fragment reference",keywords:["fragment","read","fragment reference"]},i=void 0,c={},l=[{value:"<code>useFragment</code>",id:"usefragment",level:2},{value:"Arguments",id:"arguments",level:3},{value:"Return Value",id:"return-value",level:3},{value:"Behavior",id:"behavior",level:3}];function d(e){const t={code:"code",em:"em",h2:"h2",h3:"h3",li:"li",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{id:"usefragment",children:(0,n.jsx)(t.code,{children:"useFragment"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:'import * as React from "react";\nimport {\n  graphql,\n  useFragment,\n} from "@graphitation/apollo-react-relay-duct-tape";\n\nimport { UserComponent_user$key } from "./__generated__/UserComponent_user.graphql";\n\ninterface Props {\n  user: UserComponent_user$key;\n}\n\nconst UserComponent: React.FC<Props> = (props) => {\n  const data = useFragment(\n    graphql`\n      fragment UserComponent_user on User {\n        name\n        profile_picture(scale: 2) {\n          uri\n        }\n      }\n    `,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>{data.name}</h1>\n      <div>\n        <img src={data.profile_picture?.uri} />\n      </div>\n    </>\n  );\n};\n\nexport default UserComponent;\n'})}),"\n",(0,n.jsx)(t.h3,{id:"arguments",children:"Arguments"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"fragment"}),": GraphQL fragment specified using a ",(0,n.jsx)(t.code,{children:"graphql"})," template literal."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"fragmentReference"}),": The ",(0,n.jsx)(t.em,{children:"fragment reference"})," is an opaque object that Apollo React/Relay Duct-Tape uses to read the data for the fragment from the store; more specifically, it contains information about which particular object instance the data should be read from.","\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["The type of the fragment reference can be imported from the generated TypeScript types, from the file ",(0,n.jsx)(t.code,{children:"<fragment_name>.graphql.ts"}),", and can be used to declare the type of your ",(0,n.jsx)(t.code,{children:"Props"}),". The name of the fragment reference type will be: ",(0,n.jsx)(t.code,{children:"<fragment_name>$key"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"return-value",children:"Return Value"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"data"}),": Object that contains data which has been read out from the store; the object matches the shape of specified fragment.","\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["The TypeScript type for data will also match this shape, and contain types derived from the GraphQL Schema. For example, the type of ",(0,n.jsx)(t.code,{children:"data"})," above is: ",(0,n.jsx)(t.code,{children:"{ name: string, profile_picture: null | { uri: string } }"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"behavior",children:"Behavior"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["The component is automatically subscribed to updates to the fragment data: if the data for this particular ",(0,n.jsx)(t.code,{children:"User"})," is updated anywhere in the app (e.g. via fetching new data, or mutating existing data), the component will automatically re-render with the latest updated data."]}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}}}]);