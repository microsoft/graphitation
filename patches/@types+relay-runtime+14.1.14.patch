diff --git a/node_modules/@types/relay-runtime/index.d.ts b/node_modules/@types/relay-runtime/index.d.ts
index f165121..8dad92f 100644
--- a/node_modules/@types/relay-runtime/index.d.ts
+++ b/node_modules/@types/relay-runtime/index.d.ts
@@ -154,9 +154,10 @@ export { RelayObservable as Observable } from "./lib/network/RelayObservable";
 export { default as Environment, EnvironmentConfig } from "./lib/store/RelayModernEnvironment";
 import QueryResponseCache from "./lib/network/RelayQueryResponseCache";
 export { QueryResponseCache };
-export { RelayModernRecord as Record } from "./lib/store/RelayModernRecord";
 export { default as Store } from "./lib/store/RelayModernStore";
-export { RelayRecordSource as RecordSource } from "./lib/store/RelayRecordSource";
+import * as RecordSource from './lib/store/RelayRecordSource';
+import * as Record from './lib/store/RelayModernRecord';
+export { RecordSource, Record };
 
 export { createFragmentSpecResolver } from "./lib/store/createFragmentSpecResolver";
 export { readInlineData } from "./lib/store/readInlineData";
diff --git a/node_modules/@types/relay-runtime/lib/store/RelayModernRecord.d.ts b/node_modules/@types/relay-runtime/lib/store/RelayModernRecord.d.ts
index 8bf74aa..43a731e 100644
--- a/node_modules/@types/relay-runtime/lib/store/RelayModernRecord.d.ts
+++ b/node_modules/@types/relay-runtime/lib/store/RelayModernRecord.d.ts
@@ -1,11 +1,11 @@
 import { DataID } from "../util/RelayRuntimeTypes";
 import { Record } from "./RelayStoreTypes";
 
-export class RelayModernRecord {
+// export class RelayModernRecord {
     /**
      * Clone a record.
      */
-    clone(record: Record): Record;
+    export function clone(record: Record): Record;
 
     /**
      * Copies all fields from `source` to `sink`, excluding `__id` and `__typename`.
@@ -15,71 +15,71 @@ export class RelayModernRecord {
      * copied by reference and not value; callers should ensure that values are
      * copied on write.
      */
-    copyFields(source: Record, sink: Record): void;
+    export function copyFields(source: Record, sink: Record): void;
 
     /**
      * Create a new record.
      */
-    create(dataID: DataID, typeName: string): Record;
+    export function create(dataID: DataID, typeName: string): Record;
 
     /**
      * Get the record's `id` if available or the client-generated identifier.
      */
-    getDataID(record: Record): DataID;
+    export function getDataID(record: Record): DataID;
 
     /**
      * Get the concrete type of the record.
      */
-    getType(record: Record): string;
+    export function getType(record: Record): string;
 
     /**
      * Get a scalar (non-link) field value.
      */
-    getValue(record: Record, storageKey: string): unknown;
+    export function getValue(record: Record, storageKey: string): unknown;
 
     /**
      * Get the value of a field as a reference to another record. Throws if the
      * field has a different type.
      */
-    getLinkedRecordID(record: Record, storageKey: string): DataID | null;
+    export function getLinkedRecordID(record: Record, storageKey: string): DataID | null;
 
     /**
      * Get the value of a field as a list of references to other records. Throws if
      * the field has a different type.
      */
-    getLinkedRecordIDs(record: Record, storageKey: string): DataID[] | null;
+    export function getLinkedRecordIDs(record: Record, storageKey: string): DataID[] | null;
 
     /**
      * Compares the fields of a previous and new record, returning either the
      * previous record if all fields are equal or a new record (with merged fields)
      * if any fields have changed.
      */
-    update(prevRecord: Record, nextRecord: Record): Record;
+    export function update(prevRecord: Record, nextRecord: Record): Record;
 
     /**
      * Returns a new record with the contents of the given records. Fields in the
      * second record will overwrite identical fields in the first record.
      */
-    merge(record1: Record, record2: Record): Record;
+    export function merge(record1: Record, record2: Record): Record;
 
     /**
      * Prevent modifications to the record. Attempts to call `set*` functions on a
      * frozen record will fatal at runtime.
      */
-    freeze(record: Record): void;
+    export function freeze(record: Record): void;
 
     /**
      * Set the value of a storageKey to a scalar.
      */
-    setValue(record: Record, storageKey: string, value: any): void;
+    export function setValue(record: Record, storageKey: string, value: any): void;
 
     /**
      * Set the value of a field to a reference to another record.
      */
-    setLinkedRecordID(record: Record, storageKey: string, linkedID: DataID): void;
+    export function setLinkedRecordID(record: Record, storageKey: string, linkedID: DataID): void;
 
     /**
      * Set the value of a field to a list of references other records.
      */
-    setLinkedRecordIDs(record: Record, storageKey: string, linkedIDs: DataID[] | null): void;
-}
+    export function setLinkedRecordIDs(record: Record, storageKey: string, linkedIDs: DataID[] | null): void;
+// }
diff --git a/node_modules/@types/relay-runtime/lib/store/RelayPublishQueue.d.ts b/node_modules/@types/relay-runtime/lib/store/RelayPublishQueue.d.ts
new file mode 100644
index 0000000..e4b515d
--- /dev/null
+++ b/node_modules/@types/relay-runtime/lib/store/RelayPublishQueue.d.ts
@@ -0,0 +1,48 @@
+import { Store, PublishQueue, OptimisticUpdate, StoreUpdater, RecordSource, OperationDescriptor, RelayResponsePayload, SelectorStoreUpdater, RequestDescriptor } from "./RelayStoreTypes";
+import { HandlerProvider } from "../handlers/RelayDefaultHandlerProvider";
+
+export default class RelayPublishQueue implements PublishQueue {
+    constructor(store: Store, handlerProvider: HandlerProvider | null | undefined, getDataId: (fieldValue: Record<string, unknown>, typeName: string) => unknown);
+
+    /**
+     * Schedule applying an optimistic updates on the next `run()`.
+     */
+     applyUpdate(updater: OptimisticUpdate): void;
+
+     /**
+      * Schedule reverting an optimistic updates on the next `run()`.
+      */
+     revertUpdate(updater: OptimisticUpdate): void;
+ 
+     /**
+      * Schedule a revert of all optimistic updates on the next `run()`.
+      */
+     revertAll(): void;
+ 
+     /**
+      * Schedule applying a payload to the store on the next `run()`.
+      */
+     commitPayload(
+         operation: OperationDescriptor,
+         payload: RelayResponsePayload,
+         updater?: SelectorStoreUpdater | null,
+     ): void;
+ 
+     /**
+      * Schedule an updater to mutate the store on the next `run()` typically to
+      * update client schema fields.
+      */
+     commitUpdate(updater: StoreUpdater): void;
+ 
+     /**
+      * Schedule a publish to the store from the provided source on the next
+      * `run()`. As an example, to update the store with substituted fields that
+      * are missing in the store.
+      */
+     commitSource(source: RecordSource): void;
+ 
+     /**
+      * Execute all queued up operations from the other public methods.
+      */
+     run(): ReadonlyArray<RequestDescriptor>;
+}
\ No newline at end of file
diff --git a/node_modules/@types/relay-runtime/lib/store/RelayRecordSource.d.ts b/node_modules/@types/relay-runtime/lib/store/RelayRecordSource.d.ts
index d0ed98c..bcdfebe 100644
--- a/node_modules/@types/relay-runtime/lib/store/RelayRecordSource.d.ts
+++ b/node_modules/@types/relay-runtime/lib/store/RelayRecordSource.d.ts
@@ -2,7 +2,7 @@ import { DataID } from "../util/RelayRuntimeTypes";
 import { RecordState } from "./RelayRecordState";
 import { MutableRecordSource, Record, RecordMap } from "./RelayStoreTypes";
 
-export class RelayRecordSource implements MutableRecordSource {
+export default class RelayRecordSource implements MutableRecordSource {
     constructor(records?: RecordMap);
 
     static create(records?: RecordMap): MutableRecordSource;
diff --git a/node_modules/@types/relay-runtime/lib/store/RelayResponseNormalizer.d.ts b/node_modules/@types/relay-runtime/lib/store/RelayResponseNormalizer.d.ts
index 185401e..029d181 100644
--- a/node_modules/@types/relay-runtime/lib/store/RelayResponseNormalizer.d.ts
+++ b/node_modules/@types/relay-runtime/lib/store/RelayResponseNormalizer.d.ts
@@ -7,6 +7,7 @@ export interface NormalizationOptions {
     getDataID: GetDataID;
     path?: ReadonlyArray<string> | undefined;
     request: RequestDescriptor;
+    treatMissingFieldsAsNull?: boolean;
 }
 
 /**
diff --git a/node_modules/@types/relay-runtime/lib/store/RelayStoreTypes.d.ts b/node_modules/@types/relay-runtime/lib/store/RelayStoreTypes.d.ts
index 442266b..777c7ce 100644
--- a/node_modules/@types/relay-runtime/lib/store/RelayStoreTypes.d.ts
+++ b/node_modules/@types/relay-runtime/lib/store/RelayStoreTypes.d.ts
@@ -100,7 +100,7 @@ export interface NormalizationSelector {
 export interface TypedSnapshot<TData> {
     readonly data: TData;
     readonly isMissingData: boolean;
-    readonly seenRecords: RecordMap;
+    readonly seenRecords: Set<Record>;
     readonly selector: SingularReaderSelector;
 }
 export type Snapshot = TypedSnapshot<SelectorData>;
@@ -208,7 +208,7 @@ export interface MutableRecordSource extends RecordSource {
 }
 
 export interface CheckOptions {
-    target: MutableRecordSource;
+    getTargetForActor: () => MutableRecordSource;
     handlers: ReadonlyArray<MissingFieldHandler>;
 }
 
@@ -230,7 +230,7 @@ export interface Store {
     /**
      * Get a read-only view of the store's internal RecordSource.
      */
-    getSource(): RecordSource;
+    getSource(includeOptimisticSource?: boolean): RecordSource;
 
     /**
      * Determine if the operation can be resolved with data in the store (i.e. no
@@ -243,7 +243,7 @@ export interface Store {
      * Optionally takes an owner, corresponding to the operation that
      * owns this selector (fragment).
      */
-    lookup(selector: SingularReaderSelector): Snapshot;
+    lookup(selector: SingularReaderSelector, includeOptimisticSource?: boolean): Snapshot;
 
     /**
      * Notify subscribers (see `subscribe`) of any data that was published
