// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Invalid #1 1`] = `
"#### ⌨️ Code

      1 | type Two_Namespaces_Foo { test: String }

#### ⚙️ Options

    {
      "types": "Namespaced_PascalCase"
    }

#### ❌ Error

    > 1 | type Two_Namespaces_Foo { test: String }
        |      ^^^^^^^^^^^^^^^^^^ Type "Two_Namespaces_Foo" should be in Namespaced_PascalCase format

#### 💡 Suggestion: Rename to \`TwoNamespacesFoo\`

    1 | type TwoNamespacesFoo { test: String }"
`;

exports[`Invalid #2 1`] = `
"#### ⌨️ Code

      1 | type Namespaced_foo { test: String }

#### ⚙️ Options

    {
      "types": "Namespaced_PascalCase"
    }

#### ❌ Error

    > 1 | type Namespaced_foo { test: String }
        |      ^^^^^^^^^^^^^^ Type "Namespaced_foo" should be in Namespaced_PascalCase format

#### 💡 Suggestion: Rename to \`NamespacedFoo\`

    1 | type NamespacedFoo { test: String }"
`;

exports[`Invalid #3 1`] = `
"#### ⌨️ Code

      1 | type namespaced_Bar { test: String }

#### ⚙️ Options

    {
      "types": "Namespaced_PascalCase"
    }

#### ❌ Error

    > 1 | type namespaced_Bar { test: String }
        |      ^^^^^^^^^^^^^^ Type "namespaced_Bar" should be in Namespaced_PascalCase format

#### 💡 Suggestion: Rename to \`NamespacedBar\`

    1 | type NamespacedBar { test: String }"
`;

exports[`Invalid #4 1`] = `
"#### ⌨️ Code

      1 | type baz { test: String }

#### ⚙️ Options

    {
      "types": "Namespaced_PascalCase"
    }

#### ❌ Error

    > 1 | type baz { test: String }
        |      ^^^ Type "baz" should be in Namespaced_PascalCase format

#### 💡 Suggestion: Rename to \`Baz\`

    1 | type Baz { test: String }"
`;

exports[`Invalid #5 1`] = `
"#### ⌨️ Code

      1 | type b { test: String }

#### ⚙️ Options

    {
      "types": "PascalCase",
      "FieldDefinition": "PascalCase"
    }

#### ❌ Error 1/2

    > 1 | type b { test: String }
        |      ^ Type "b" should be in PascalCase format

#### 💡 Suggestion: Rename to \`B\`

    1 | type B { test: String }

#### ❌ Error 2/2

    > 1 | type b { test: String }
        |          ^^^^ Field "test" should be in PascalCase format

#### 💡 Suggestion: Rename to \`Test\`

    1 | type b { Test: String }"
`;

exports[`Invalid #6 1`] = `
"#### ⌨️ Code

      1 | type __b { test__: String }

#### ⚙️ Options

    {
      "allowLeadingUnderscore": false,
      "allowTrailingUnderscore": false
    }

#### ❌ Error 1/2

    > 1 | type __b { test__: String }
        |      ^^^ Leading underscores are not allowed

#### 💡 Suggestion: Rename to \`b\`

    1 | type b { test__: String }

#### ❌ Error 2/2

    > 1 | type __b { test__: String }
        |            ^^^^^^ Trailing underscores are not allowed

#### 💡 Suggestion: Rename to \`test\`

    1 | type __b { test: String }"
`;

exports[`Invalid #7 1`] = `
"#### ⌨️ Code

      1 | scalar BSONDecimal

#### ⚙️ Options

    {
      "ScalarTypeDefinition": "snake_case"
    }

#### ❌ Error

    > 1 | scalar BSONDecimal
        |        ^^^^^^^^^^^ Scalar "BSONDecimal" should be in snake_case format

#### 💡 Suggestion: Rename to \`bson_decimal\`

    1 | scalar bson_decimal"
`;

exports[`Invalid #8 1`] = `
"#### ⌨️ Code

      1 | enum B { test }

#### ⚙️ Options

    {
      "EnumTypeDefinition": "camelCase",
      "EnumValueDefinition": "UPPER_CASE"
    }

#### ❌ Error 1/2

    > 1 | enum B { test }
        |      ^ Enumerator "B" should be in camelCase format

#### 💡 Suggestion: Rename to \`b\`

    1 | enum b { test }

#### ❌ Error 2/2

    > 1 | enum B { test }
        |          ^^^^ Enumeration value "test" should be in UPPER_CASE format

#### 💡 Suggestion: Rename to \`TEST\`

    1 | enum B { TEST }"
`;

exports[`Invalid #9 1`] = `
"#### ⌨️ Code

      1 | input test { _Value: String }

#### ⚙️ Options

    {
      "types": "PascalCase",
      "InputValueDefinition": "snake_case"
    }

#### ❌ Error 1/3

    > 1 | input test { _Value: String }
        |       ^^^^ Input type "test" should be in PascalCase format

#### 💡 Suggestion: Rename to \`Test\`

    1 | input Test { _Value: String }

#### ❌ Error 2/3

    > 1 | input test { _Value: String }
        |              ^^^^^^ Input property "_Value" should be in snake_case format

#### 💡 Suggestion: Rename to \`_value\`

    1 | input test { _value: String }

#### ❌ Error 3/3

    > 1 | input test { _Value: String }
        |              ^^^^^^ Leading underscores are not allowed

#### 💡 Suggestion: Rename to \`Value\`

    1 | input test { Value: String }"
`;

exports[`Invalid #10 1`] = `
"#### ⌨️ Code

      1 | type TypeOne { aField: String } enum Z { VALUE_ONE VALUE_TWO }

#### ⚙️ Options

    {
      "ObjectTypeDefinition": {
        "style": "camelCase"
      },
      "FieldDefinition": {
        "style": "camelCase",
        "suffix": "AAA"
      },
      "EnumValueDefinition": {
        "style": "camelCase",
        "suffix": "ENUM"
      }
    }

#### ❌ Error 1/4

    > 1 | type TypeOne { aField: String } enum Z { VALUE_ONE VALUE_TWO }
        |      ^^^^^^^ Type "TypeOne" should be in camelCase format

#### 💡 Suggestion: Rename to \`typeOne\`

    1 | type typeOne { aField: String } enum Z { VALUE_ONE VALUE_TWO }

#### ❌ Error 2/4

    > 1 | type TypeOne { aField: String } enum Z { VALUE_ONE VALUE_TWO }
        |                ^^^^^^ Field "aField" should have "AAA" suffix

#### 💡 Suggestion: Rename to \`aFieldAAA\`

    1 | type TypeOne { aFieldAAA: String } enum Z { VALUE_ONE VALUE_TWO }

#### ❌ Error 3/4

    > 1 | type TypeOne { aField: String } enum Z { VALUE_ONE VALUE_TWO }
        |                                          ^^^^^^^^^ Enumeration value "VALUE_ONE" should have "ENUM" suffix

#### 💡 Suggestion: Rename to \`VALUE_ONEENUM\`

    1 | type TypeOne { aField: String } enum Z { VALUE_ONEENUM VALUE_TWO }

#### ❌ Error 4/4

    > 1 | type TypeOne { aField: String } enum Z { VALUE_ONE VALUE_TWO }
        |                                                    ^^^^^^^^^ Enumeration value "VALUE_TWO" should have "ENUM" suffix

#### 💡 Suggestion: Rename to \`VALUE_TWOENUM\`

    1 | type TypeOne { aField: String } enum Z { VALUE_ONE VALUE_TWOENUM }"
`;

exports[`Invalid #11 1`] = `
"#### ⌨️ Code

      1 | type One { aField: String } enum Z { A_ENUM_VALUE_ONE VALUE_TWO }

#### ⚙️ Options

    {
      "ObjectTypeDefinition": {
        "style": "PascalCase"
      },
      "FieldDefinition": {
        "style": "camelCase",
        "prefix": "Field"
      },
      "EnumValueDefinition": {
        "style": "UPPER_CASE",
        "prefix": "ENUM"
      }
    }

#### ❌ Error 1/3

    > 1 | type One { aField: String } enum Z { A_ENUM_VALUE_ONE VALUE_TWO }
        |            ^^^^^^ Field "aField" should have "Field" prefix

#### 💡 Suggestion: Rename to \`FieldaField\`

    1 | type One { FieldaField: String } enum Z { A_ENUM_VALUE_ONE VALUE_TWO }

#### ❌ Error 2/3

    > 1 | type One { aField: String } enum Z { A_ENUM_VALUE_ONE VALUE_TWO }
        |                                      ^^^^^^^^^^^^^^^^ Enumeration value "A_ENUM_VALUE_ONE" should have "ENUM" prefix

#### 💡 Suggestion: Rename to \`ENUMA_ENUM_VALUE_ONE\`

    1 | type One { aField: String } enum Z { ENUMA_ENUM_VALUE_ONE VALUE_TWO }

#### ❌ Error 3/3

    > 1 | type One { aField: String } enum Z { A_ENUM_VALUE_ONE VALUE_TWO }
        |                                                       ^^^^^^^^^ Enumeration value "VALUE_TWO" should have "ENUM" prefix

#### 💡 Suggestion: Rename to \`ENUMVALUE_TWO\`

    1 | type One { aField: String } enum Z { A_ENUM_VALUE_ONE ENUMVALUE_TWO }"
`;

exports[`Invalid #12 1`] = `
"#### ⌨️ Code

      1 | type One { getFoo: String, queryBar: String } type Query { getA(id: ID!): String, queryB: String } extend type Query { getC: String }

#### ⚙️ Options

    {
      "ObjectTypeDefinition": {
        "style": "PascalCase",
        "forbiddenPrefixes": [
          "On"
        ]
      },
      "FieldDefinition": {
        "style": "camelCase",
        "forbiddenPrefixes": [
          "foo",
          "bar"
        ],
        "forbiddenSuffixes": [
          "Foo"
        ]
      },
      "FieldDefinition[parent.name.value=Query]": {
        "style": "camelCase",
        "forbiddenPrefixes": [
          "get",
          "query"
        ]
      }
    }

#### ❌ Error 1/5

    > 1 | type One { getFoo: String, queryBar: String } type Query { getA(id: ID!): String, queryB: String } extend type Query { getC: String }
        |      ^^^ Type "One" should not have "On" prefix

#### 💡 Suggestion: Rename to \`e\`

    1 | type e { getFoo: String, queryBar: String } type Query { getA(id: ID!): String, queryB: String } extend type Query { getC: String }

#### ❌ Error 2/5

    > 1 | type One { getFoo: String, queryBar: String } type Query { getA(id: ID!): String, queryB: String } extend type Query { getC: String }
        |            ^^^^^^ Field "getFoo" should not have "Foo" suffix

#### 💡 Suggestion: Rename to \`get\`

    1 | type One { get: String, queryBar: String } type Query { getA(id: ID!): String, queryB: String } extend type Query { getC: String }

#### ❌ Error 3/5

    > 1 | type One { getFoo: String, queryBar: String } type Query { getA(id: ID!): String, queryB: String } extend type Query { getC: String }
        |                                                            ^^^^ Field "getA" should not have "get" prefix

#### 💡 Suggestion: Rename to \`A\`

    1 | type One { getFoo: String, queryBar: String } type Query { A(id: ID!): String, queryB: String } extend type Query { getC: String }

#### ❌ Error 4/5

    > 1 | type One { getFoo: String, queryBar: String } type Query { getA(id: ID!): String, queryB: String } extend type Query { getC: String }
        |                                                                                   ^^^^^^ Field "queryB" should not have "query" prefix

#### 💡 Suggestion: Rename to \`B\`

    1 | type One { getFoo: String, queryBar: String } type Query { getA(id: ID!): String, B: String } extend type Query { getC: String }

#### ❌ Error 5/5

    > 1 | type One { getFoo: String, queryBar: String } type Query { getA(id: ID!): String, queryB: String } extend type Query { getC: String }
        |                                                                                                                        ^^^^ Field "getC" should not have "get" prefix

#### 💡 Suggestion: Rename to \`C\`

    1 | type One { getFoo: String, queryBar: String } type Query { getA(id: ID!): String, queryB: String } extend type Query { C: String }"
`;

exports[`Invalid #13 1`] = `
"#### ⌨️ Code

      1 | query Foo { foo } query getBar { bar }

#### ⚙️ Options

    {
      "OperationDefinition": {
        "style": "camelCase",
        "forbiddenPrefixes": [
          "get"
        ]
      }
    }

#### ❌ Error 1/2

    > 1 | query Foo { foo } query getBar { bar }
        |       ^^^ Operation "Foo" should be in camelCase format

#### 💡 Suggestion: Rename to \`foo\`

    1 | query foo { foo } query getBar { bar }

#### ❌ Error 2/2

    > 1 | query Foo { foo } query getBar { bar }
        |                         ^^^^^^ Operation "getBar" should not have "get" prefix

#### 💡 Suggestion: Rename to \`Bar\`

    1 | query Foo { foo } query Bar { bar }"
`;

exports[`Invalid #14 1`] = `
"#### ⌨️ Code

       1 |         type Query {
       2 |           fieldQuery: ID
       3 |           queryField: ID
       4 |           getField: ID
       5 |         }
       6 |
       7 |         type Mutation {
       8 |           fieldMutation: ID
       9 |           mutationField: ID
      10 |         }
      11 |
      12 |         type Subscription {
      13 |           fieldSubscription: ID
      14 |           subscriptionField: ID
      15 |         }
      16 |
      17 |         enum TestEnum
      18 |         extend enum EnumTest {
      19 |           A
      20 |         }
      21 |
      22 |         interface TestInterface
      23 |         extend interface InterfaceTest {
      24 |           id: ID
      25 |         }
      26 |
      27 |         union TestUnion
      28 |         extend union UnionTest = TestInterface
      29 |
      30 |         type TestType
      31 |         extend type TypeTest {
      32 |           id: ID
      33 |         }

#### ⚙️ Options

    {
      "types": "PascalCase",
      "FieldDefinition": "camelCase",
      "InputValueDefinition": "camelCase",
      "Argument": "camelCase",
      "DirectiveDefinition": "camelCase",
      "EnumValueDefinition": "UPPER_CASE",
      "FieldDefinition[parent.name.value=Query]": {
        "forbiddenPrefixes": [
          "query",
          "get"
        ],
        "forbiddenSuffixes": [
          "Query"
        ]
      },
      "FieldDefinition[parent.name.value=Mutation]": {
        "forbiddenPrefixes": [
          "mutation"
        ],
        "forbiddenSuffixes": [
          "Mutation"
        ]
      },
      "FieldDefinition[parent.name.value=Subscription]": {
        "forbiddenPrefixes": [
          "subscription"
        ],
        "forbiddenSuffixes": [
          "Subscription"
        ]
      },
      "EnumTypeDefinition,EnumTypeExtension": {
        "forbiddenPrefixes": [
          "Enum"
        ],
        "forbiddenSuffixes": [
          "Enum"
        ]
      },
      "InterfaceTypeDefinition,InterfaceTypeExtension": {
        "forbiddenPrefixes": [
          "Interface"
        ],
        "forbiddenSuffixes": [
          "Interface"
        ]
      },
      "UnionTypeDefinition,UnionTypeExtension": {
        "forbiddenPrefixes": [
          "Union"
        ],
        "forbiddenSuffixes": [
          "Union"
        ]
      },
      "ObjectTypeDefinition,ObjectTypeExtension": {
        "forbiddenPrefixes": [
          "Type"
        ],
        "forbiddenSuffixes": [
          "Type"
        ]
      }
    }

#### ❌ Error 1/15

      1 |         type Query {
    > 2 |           fieldQuery: ID
        |           ^^^^^^^^^^ Field "fieldQuery" should not have "Query" suffix
      3 |           queryField: ID

#### 💡 Suggestion: Rename to \`field\`

     1 |         type Query {
     2 |           field: ID
     3 |           queryField: ID
     4 |           getField: ID
     5 |         }
     6 |
     7 |         type Mutation {
     8 |           fieldMutation: ID
     9 |           mutationField: ID
    10 |         }
    11 |
    12 |         type Subscription {
    13 |           fieldSubscription: ID
    14 |           subscriptionField: ID
    15 |         }
    16 |
    17 |         enum TestEnum
    18 |         extend enum EnumTest {
    19 |           A
    20 |         }
    21 |
    22 |         interface TestInterface
    23 |         extend interface InterfaceTest {
    24 |           id: ID
    25 |         }
    26 |
    27 |         union TestUnion
    28 |         extend union UnionTest = TestInterface
    29 |
    30 |         type TestType
    31 |         extend type TypeTest {
    32 |           id: ID
    33 |         }

#### ❌ Error 2/15

      2 |           fieldQuery: ID
    > 3 |           queryField: ID
        |           ^^^^^^^^^^ Field "queryField" should not have "query" prefix
      4 |           getField: ID

#### 💡 Suggestion: Rename to \`Field\`

     1 |         type Query {
     2 |           fieldQuery: ID
     3 |           Field: ID
     4 |           getField: ID
     5 |         }
     6 |
     7 |         type Mutation {
     8 |           fieldMutation: ID
     9 |           mutationField: ID
    10 |         }
    11 |
    12 |         type Subscription {
    13 |           fieldSubscription: ID
    14 |           subscriptionField: ID
    15 |         }
    16 |
    17 |         enum TestEnum
    18 |         extend enum EnumTest {
    19 |           A
    20 |         }
    21 |
    22 |         interface TestInterface
    23 |         extend interface InterfaceTest {
    24 |           id: ID
    25 |         }
    26 |
    27 |         union TestUnion
    28 |         extend union UnionTest = TestInterface
    29 |
    30 |         type TestType
    31 |         extend type TypeTest {
    32 |           id: ID
    33 |         }

#### ❌ Error 3/15

      3 |           queryField: ID
    > 4 |           getField: ID
        |           ^^^^^^^^ Field "getField" should not have "get" prefix
      5 |         }

#### 💡 Suggestion: Rename to \`Field\`

     1 |         type Query {
     2 |           fieldQuery: ID
     3 |           queryField: ID
     4 |           Field: ID
     5 |         }
     6 |
     7 |         type Mutation {
     8 |           fieldMutation: ID
     9 |           mutationField: ID
    10 |         }
    11 |
    12 |         type Subscription {
    13 |           fieldSubscription: ID
    14 |           subscriptionField: ID
    15 |         }
    16 |
    17 |         enum TestEnum
    18 |         extend enum EnumTest {
    19 |           A
    20 |         }
    21 |
    22 |         interface TestInterface
    23 |         extend interface InterfaceTest {
    24 |           id: ID
    25 |         }
    26 |
    27 |         union TestUnion
    28 |         extend union UnionTest = TestInterface
    29 |
    30 |         type TestType
    31 |         extend type TypeTest {
    32 |           id: ID
    33 |         }

#### ❌ Error 4/15

      7 |         type Mutation {
    > 8 |           fieldMutation: ID
        |           ^^^^^^^^^^^^^ Field "fieldMutation" should not have "Mutation" suffix
      9 |           mutationField: ID

#### 💡 Suggestion: Rename to \`field\`

     1 |         type Query {
     2 |           fieldQuery: ID
     3 |           queryField: ID
     4 |           getField: ID
     5 |         }
     6 |
     7 |         type Mutation {
     8 |           field: ID
     9 |           mutationField: ID
    10 |         }
    11 |
    12 |         type Subscription {
    13 |           fieldSubscription: ID
    14 |           subscriptionField: ID
    15 |         }
    16 |
    17 |         enum TestEnum
    18 |         extend enum EnumTest {
    19 |           A
    20 |         }
    21 |
    22 |         interface TestInterface
    23 |         extend interface InterfaceTest {
    24 |           id: ID
    25 |         }
    26 |
    27 |         union TestUnion
    28 |         extend union UnionTest = TestInterface
    29 |
    30 |         type TestType
    31 |         extend type TypeTest {
    32 |           id: ID
    33 |         }

#### ❌ Error 5/15

       8 |           fieldMutation: ID
    >  9 |           mutationField: ID
         |           ^^^^^^^^^^^^^ Field "mutationField" should not have "mutation" prefix
      10 |         }

#### 💡 Suggestion: Rename to \`Field\`

     1 |         type Query {
     2 |           fieldQuery: ID
     3 |           queryField: ID
     4 |           getField: ID
     5 |         }
     6 |
     7 |         type Mutation {
     8 |           fieldMutation: ID
     9 |           Field: ID
    10 |         }
    11 |
    12 |         type Subscription {
    13 |           fieldSubscription: ID
    14 |           subscriptionField: ID
    15 |         }
    16 |
    17 |         enum TestEnum
    18 |         extend enum EnumTest {
    19 |           A
    20 |         }
    21 |
    22 |         interface TestInterface
    23 |         extend interface InterfaceTest {
    24 |           id: ID
    25 |         }
    26 |
    27 |         union TestUnion
    28 |         extend union UnionTest = TestInterface
    29 |
    30 |         type TestType
    31 |         extend type TypeTest {
    32 |           id: ID
    33 |         }

#### ❌ Error 6/15

      12 |         type Subscription {
    > 13 |           fieldSubscription: ID
         |           ^^^^^^^^^^^^^^^^^ Field "fieldSubscription" should not have "Subscription" suffix
      14 |           subscriptionField: ID

#### 💡 Suggestion: Rename to \`field\`

     1 |         type Query {
     2 |           fieldQuery: ID
     3 |           queryField: ID
     4 |           getField: ID
     5 |         }
     6 |
     7 |         type Mutation {
     8 |           fieldMutation: ID
     9 |           mutationField: ID
    10 |         }
    11 |
    12 |         type Subscription {
    13 |           field: ID
    14 |           subscriptionField: ID
    15 |         }
    16 |
    17 |         enum TestEnum
    18 |         extend enum EnumTest {
    19 |           A
    20 |         }
    21 |
    22 |         interface TestInterface
    23 |         extend interface InterfaceTest {
    24 |           id: ID
    25 |         }
    26 |
    27 |         union TestUnion
    28 |         extend union UnionTest = TestInterface
    29 |
    30 |         type TestType
    31 |         extend type TypeTest {
    32 |           id: ID
    33 |         }

#### ❌ Error 7/15

      13 |           fieldSubscription: ID
    > 14 |           subscriptionField: ID
         |           ^^^^^^^^^^^^^^^^^ Field "subscriptionField" should not have "subscription" prefix
      15 |         }

#### 💡 Suggestion: Rename to \`Field\`

     1 |         type Query {
     2 |           fieldQuery: ID
     3 |           queryField: ID
     4 |           getField: ID
     5 |         }
     6 |
     7 |         type Mutation {
     8 |           fieldMutation: ID
     9 |           mutationField: ID
    10 |         }
    11 |
    12 |         type Subscription {
    13 |           fieldSubscription: ID
    14 |           Field: ID
    15 |         }
    16 |
    17 |         enum TestEnum
    18 |         extend enum EnumTest {
    19 |           A
    20 |         }
    21 |
    22 |         interface TestInterface
    23 |         extend interface InterfaceTest {
    24 |           id: ID
    25 |         }
    26 |
    27 |         union TestUnion
    28 |         extend union UnionTest = TestInterface
    29 |
    30 |         type TestType
    31 |         extend type TypeTest {
    32 |           id: ID
    33 |         }

#### ❌ Error 8/15

      16 |
    > 17 |         enum TestEnum
         |              ^^^^^^^^ Enumerator "TestEnum" should not have "Enum" suffix
      18 |         extend enum EnumTest {

#### 💡 Suggestion: Rename to \`Test\`

     1 |         type Query {
     2 |           fieldQuery: ID
     3 |           queryField: ID
     4 |           getField: ID
     5 |         }
     6 |
     7 |         type Mutation {
     8 |           fieldMutation: ID
     9 |           mutationField: ID
    10 |         }
    11 |
    12 |         type Subscription {
    13 |           fieldSubscription: ID
    14 |           subscriptionField: ID
    15 |         }
    16 |
    17 |         enum Test
    18 |         extend enum EnumTest {
    19 |           A
    20 |         }
    21 |
    22 |         interface TestInterface
    23 |         extend interface InterfaceTest {
    24 |           id: ID
    25 |         }
    26 |
    27 |         union TestUnion
    28 |         extend union UnionTest = TestInterface
    29 |
    30 |         type TestType
    31 |         extend type TypeTest {
    32 |           id: ID
    33 |         }

#### ❌ Error 9/15

      17 |         enum TestEnum
    > 18 |         extend enum EnumTest {
         |                     ^^^^^^^^ EnumTypeExtension "EnumTest" should not have "Enum" prefix
      19 |           A

#### 💡 Suggestion: Rename to \`Test\`

     1 |         type Query {
     2 |           fieldQuery: ID
     3 |           queryField: ID
     4 |           getField: ID
     5 |         }
     6 |
     7 |         type Mutation {
     8 |           fieldMutation: ID
     9 |           mutationField: ID
    10 |         }
    11 |
    12 |         type Subscription {
    13 |           fieldSubscription: ID
    14 |           subscriptionField: ID
    15 |         }
    16 |
    17 |         enum TestEnum
    18 |         extend enum Test {
    19 |           A
    20 |         }
    21 |
    22 |         interface TestInterface
    23 |         extend interface InterfaceTest {
    24 |           id: ID
    25 |         }
    26 |
    27 |         union TestUnion
    28 |         extend union UnionTest = TestInterface
    29 |
    30 |         type TestType
    31 |         extend type TypeTest {
    32 |           id: ID
    33 |         }

#### ❌ Error 10/15

      21 |
    > 22 |         interface TestInterface
         |                   ^^^^^^^^^^^^^ Interface "TestInterface" should not have "Interface" suffix
      23 |         extend interface InterfaceTest {

#### 💡 Suggestion: Rename to \`Test\`

     1 |         type Query {
     2 |           fieldQuery: ID
     3 |           queryField: ID
     4 |           getField: ID
     5 |         }
     6 |
     7 |         type Mutation {
     8 |           fieldMutation: ID
     9 |           mutationField: ID
    10 |         }
    11 |
    12 |         type Subscription {
    13 |           fieldSubscription: ID
    14 |           subscriptionField: ID
    15 |         }
    16 |
    17 |         enum TestEnum
    18 |         extend enum EnumTest {
    19 |           A
    20 |         }
    21 |
    22 |         interface Test
    23 |         extend interface InterfaceTest {
    24 |           id: ID
    25 |         }
    26 |
    27 |         union TestUnion
    28 |         extend union UnionTest = TestInterface
    29 |
    30 |         type TestType
    31 |         extend type TypeTest {
    32 |           id: ID
    33 |         }

#### ❌ Error 11/15

      22 |         interface TestInterface
    > 23 |         extend interface InterfaceTest {
         |                          ^^^^^^^^^^^^^ InterfaceTypeExtension "InterfaceTest" should not have "Interface" prefix
      24 |           id: ID

#### 💡 Suggestion: Rename to \`Test\`

     1 |         type Query {
     2 |           fieldQuery: ID
     3 |           queryField: ID
     4 |           getField: ID
     5 |         }
     6 |
     7 |         type Mutation {
     8 |           fieldMutation: ID
     9 |           mutationField: ID
    10 |         }
    11 |
    12 |         type Subscription {
    13 |           fieldSubscription: ID
    14 |           subscriptionField: ID
    15 |         }
    16 |
    17 |         enum TestEnum
    18 |         extend enum EnumTest {
    19 |           A
    20 |         }
    21 |
    22 |         interface TestInterface
    23 |         extend interface Test {
    24 |           id: ID
    25 |         }
    26 |
    27 |         union TestUnion
    28 |         extend union UnionTest = TestInterface
    29 |
    30 |         type TestType
    31 |         extend type TypeTest {
    32 |           id: ID
    33 |         }

#### ❌ Error 12/15

      26 |
    > 27 |         union TestUnion
         |               ^^^^^^^^^ Union "TestUnion" should not have "Union" suffix
      28 |         extend union UnionTest = TestInterface

#### 💡 Suggestion: Rename to \`Test\`

     1 |         type Query {
     2 |           fieldQuery: ID
     3 |           queryField: ID
     4 |           getField: ID
     5 |         }
     6 |
     7 |         type Mutation {
     8 |           fieldMutation: ID
     9 |           mutationField: ID
    10 |         }
    11 |
    12 |         type Subscription {
    13 |           fieldSubscription: ID
    14 |           subscriptionField: ID
    15 |         }
    16 |
    17 |         enum TestEnum
    18 |         extend enum EnumTest {
    19 |           A
    20 |         }
    21 |
    22 |         interface TestInterface
    23 |         extend interface InterfaceTest {
    24 |           id: ID
    25 |         }
    26 |
    27 |         union Test
    28 |         extend union UnionTest = TestInterface
    29 |
    30 |         type TestType
    31 |         extend type TypeTest {
    32 |           id: ID
    33 |         }

#### ❌ Error 13/15

      27 |         union TestUnion
    > 28 |         extend union UnionTest = TestInterface
         |                      ^^^^^^^^^ UnionTypeExtension "UnionTest" should not have "Union" prefix
      29 |

#### 💡 Suggestion: Rename to \`Test\`

     1 |         type Query {
     2 |           fieldQuery: ID
     3 |           queryField: ID
     4 |           getField: ID
     5 |         }
     6 |
     7 |         type Mutation {
     8 |           fieldMutation: ID
     9 |           mutationField: ID
    10 |         }
    11 |
    12 |         type Subscription {
    13 |           fieldSubscription: ID
    14 |           subscriptionField: ID
    15 |         }
    16 |
    17 |         enum TestEnum
    18 |         extend enum EnumTest {
    19 |           A
    20 |         }
    21 |
    22 |         interface TestInterface
    23 |         extend interface InterfaceTest {
    24 |           id: ID
    25 |         }
    26 |
    27 |         union TestUnion
    28 |         extend union Test = TestInterface
    29 |
    30 |         type TestType
    31 |         extend type TypeTest {
    32 |           id: ID
    33 |         }

#### ❌ Error 14/15

      29 |
    > 30 |         type TestType
         |              ^^^^^^^^ Type "TestType" should not have "Type" suffix
      31 |         extend type TypeTest {

#### 💡 Suggestion: Rename to \`Test\`

     1 |         type Query {
     2 |           fieldQuery: ID
     3 |           queryField: ID
     4 |           getField: ID
     5 |         }
     6 |
     7 |         type Mutation {
     8 |           fieldMutation: ID
     9 |           mutationField: ID
    10 |         }
    11 |
    12 |         type Subscription {
    13 |           fieldSubscription: ID
    14 |           subscriptionField: ID
    15 |         }
    16 |
    17 |         enum TestEnum
    18 |         extend enum EnumTest {
    19 |           A
    20 |         }
    21 |
    22 |         interface TestInterface
    23 |         extend interface InterfaceTest {
    24 |           id: ID
    25 |         }
    26 |
    27 |         union TestUnion
    28 |         extend union UnionTest = TestInterface
    29 |
    30 |         type Test
    31 |         extend type TypeTest {
    32 |           id: ID
    33 |         }

#### ❌ Error 15/15

      30 |         type TestType
    > 31 |         extend type TypeTest {
         |                     ^^^^^^^^ ObjectTypeExtension "TypeTest" should not have "Type" prefix
      32 |           id: ID

#### 💡 Suggestion: Rename to \`Test\`

     1 |         type Query {
     2 |           fieldQuery: ID
     3 |           queryField: ID
     4 |           getField: ID
     5 |         }
     6 |
     7 |         type Mutation {
     8 |           fieldMutation: ID
     9 |           mutationField: ID
    10 |         }
    11 |
    12 |         type Subscription {
    13 |           fieldSubscription: ID
    14 |           subscriptionField: ID
    15 |         }
    16 |
    17 |         enum TestEnum
    18 |         extend enum EnumTest {
    19 |           A
    20 |         }
    21 |
    22 |         interface TestInterface
    23 |         extend interface InterfaceTest {
    24 |           id: ID
    25 |         }
    26 |
    27 |         union TestUnion
    28 |         extend union UnionTest = TestInterface
    29 |
    30 |         type TestType
    31 |         extend type Test {
    32 |           id: ID
    33 |         }"
`;

exports[`Invalid #15 1`] = `
"#### ⌨️ Code

       1 |         query TestQuery { test }
       2 |         query QueryTest { test }
       3 |         query GetQuery { test }
       4 |         query Test { test(CONTROLLED_BY_SCHEMA: 0) }
       5 |
       6 |         mutation TestMutation { test }
       7 |         mutation MutationTest { test }
       8 |
       9 |         subscription TestSubscription { test }
      10 |         subscription SubscriptionTest { test }
      11 |
      12 |         fragment TestFragment on Test { id }
      13 |         fragment FragmentTest on Test { id }

#### ⚙️ Options

    {
      "VariableDefinition": "camelCase",
      "OperationDefinition": {
        "style": "PascalCase",
        "forbiddenPrefixes": [
          "Query",
          "Mutation",
          "Subscription",
          "Get"
        ],
        "forbiddenSuffixes": [
          "Query",
          "Mutation",
          "Subscription"
        ]
      },
      "FragmentDefinition": {
        "style": "PascalCase",
        "forbiddenPrefixes": [
          "Fragment"
        ],
        "forbiddenSuffixes": [
          "Fragment"
        ]
      }
    }

#### ❌ Error 1/9

    > 1 |         query TestQuery { test }
        |               ^^^^^^^^^ Operation "TestQuery" should not have "Query" suffix
      2 |         query QueryTest { test }

#### 💡 Suggestion: Rename to \`Test\`

     1 |         query Test { test }
     2 |         query QueryTest { test }
     3 |         query GetQuery { test }
     4 |         query Test { test(CONTROLLED_BY_SCHEMA: 0) }
     5 |
     6 |         mutation TestMutation { test }
     7 |         mutation MutationTest { test }
     8 |
     9 |         subscription TestSubscription { test }
    10 |         subscription SubscriptionTest { test }
    11 |
    12 |         fragment TestFragment on Test { id }
    13 |         fragment FragmentTest on Test { id }

#### ❌ Error 2/9

      1 |         query TestQuery { test }
    > 2 |         query QueryTest { test }
        |               ^^^^^^^^^ Operation "QueryTest" should not have "Query" prefix
      3 |         query GetQuery { test }

#### 💡 Suggestion: Rename to \`Test\`

     1 |         query TestQuery { test }
     2 |         query Test { test }
     3 |         query GetQuery { test }
     4 |         query Test { test(CONTROLLED_BY_SCHEMA: 0) }
     5 |
     6 |         mutation TestMutation { test }
     7 |         mutation MutationTest { test }
     8 |
     9 |         subscription TestSubscription { test }
    10 |         subscription SubscriptionTest { test }
    11 |
    12 |         fragment TestFragment on Test { id }
    13 |         fragment FragmentTest on Test { id }

#### ❌ Error 3/9

      2 |         query QueryTest { test }
    > 3 |         query GetQuery { test }
        |               ^^^^^^^^ Operation "GetQuery" should not have "Get" prefix
      4 |         query Test { test(CONTROLLED_BY_SCHEMA: 0) }

#### 💡 Suggestion: Rename to \`Query\`

     1 |         query TestQuery { test }
     2 |         query QueryTest { test }
     3 |         query Query { test }
     4 |         query Test { test(CONTROLLED_BY_SCHEMA: 0) }
     5 |
     6 |         mutation TestMutation { test }
     7 |         mutation MutationTest { test }
     8 |
     9 |         subscription TestSubscription { test }
    10 |         subscription SubscriptionTest { test }
    11 |
    12 |         fragment TestFragment on Test { id }
    13 |         fragment FragmentTest on Test { id }

#### ❌ Error 4/9

      5 |
    > 6 |         mutation TestMutation { test }
        |                  ^^^^^^^^^^^^ Operation "TestMutation" should not have "Mutation" suffix
      7 |         mutation MutationTest { test }

#### 💡 Suggestion: Rename to \`Test\`

     1 |         query TestQuery { test }
     2 |         query QueryTest { test }
     3 |         query GetQuery { test }
     4 |         query Test { test(CONTROLLED_BY_SCHEMA: 0) }
     5 |
     6 |         mutation Test { test }
     7 |         mutation MutationTest { test }
     8 |
     9 |         subscription TestSubscription { test }
    10 |         subscription SubscriptionTest { test }
    11 |
    12 |         fragment TestFragment on Test { id }
    13 |         fragment FragmentTest on Test { id }

#### ❌ Error 5/9

      6 |         mutation TestMutation { test }
    > 7 |         mutation MutationTest { test }
        |                  ^^^^^^^^^^^^ Operation "MutationTest" should not have "Mutation" prefix
      8 |

#### 💡 Suggestion: Rename to \`Test\`

     1 |         query TestQuery { test }
     2 |         query QueryTest { test }
     3 |         query GetQuery { test }
     4 |         query Test { test(CONTROLLED_BY_SCHEMA: 0) }
     5 |
     6 |         mutation TestMutation { test }
     7 |         mutation Test { test }
     8 |
     9 |         subscription TestSubscription { test }
    10 |         subscription SubscriptionTest { test }
    11 |
    12 |         fragment TestFragment on Test { id }
    13 |         fragment FragmentTest on Test { id }

#### ❌ Error 6/9

       8 |
    >  9 |         subscription TestSubscription { test }
         |                      ^^^^^^^^^^^^^^^^ Operation "TestSubscription" should not have "Subscription" suffix
      10 |         subscription SubscriptionTest { test }

#### 💡 Suggestion: Rename to \`Test\`

     1 |         query TestQuery { test }
     2 |         query QueryTest { test }
     3 |         query GetQuery { test }
     4 |         query Test { test(CONTROLLED_BY_SCHEMA: 0) }
     5 |
     6 |         mutation TestMutation { test }
     7 |         mutation MutationTest { test }
     8 |
     9 |         subscription Test { test }
    10 |         subscription SubscriptionTest { test }
    11 |
    12 |         fragment TestFragment on Test { id }
    13 |         fragment FragmentTest on Test { id }

#### ❌ Error 7/9

       9 |         subscription TestSubscription { test }
    > 10 |         subscription SubscriptionTest { test }
         |                      ^^^^^^^^^^^^^^^^ Operation "SubscriptionTest" should not have "Subscription" prefix
      11 |

#### 💡 Suggestion: Rename to \`Test\`

     1 |         query TestQuery { test }
     2 |         query QueryTest { test }
     3 |         query GetQuery { test }
     4 |         query Test { test(CONTROLLED_BY_SCHEMA: 0) }
     5 |
     6 |         mutation TestMutation { test }
     7 |         mutation MutationTest { test }
     8 |
     9 |         subscription TestSubscription { test }
    10 |         subscription Test { test }
    11 |
    12 |         fragment TestFragment on Test { id }
    13 |         fragment FragmentTest on Test { id }

#### ❌ Error 8/9

      11 |
    > 12 |         fragment TestFragment on Test { id }
         |                  ^^^^^^^^^^^^ Fragment "TestFragment" should not have "Fragment" suffix
      13 |         fragment FragmentTest on Test { id }

#### 💡 Suggestion: Rename to \`Test\`

     1 |         query TestQuery { test }
     2 |         query QueryTest { test }
     3 |         query GetQuery { test }
     4 |         query Test { test(CONTROLLED_BY_SCHEMA: 0) }
     5 |
     6 |         mutation TestMutation { test }
     7 |         mutation MutationTest { test }
     8 |
     9 |         subscription TestSubscription { test }
    10 |         subscription SubscriptionTest { test }
    11 |
    12 |         fragment Test on Test { id }
    13 |         fragment FragmentTest on Test { id }

#### ❌ Error 9/9

      12 |         fragment TestFragment on Test { id }
    > 13 |         fragment FragmentTest on Test { id }
         |                  ^^^^^^^^^^^^ Fragment "FragmentTest" should not have "Fragment" prefix

#### 💡 Suggestion: Rename to \`Test\`

     1 |         query TestQuery { test }
     2 |         query QueryTest { test }
     3 |         query GetQuery { test }
     4 |         query Test { test(CONTROLLED_BY_SCHEMA: 0) }
     5 |
     6 |         mutation TestMutation { test }
     7 |         mutation MutationTest { test }
     8 |
     9 |         subscription TestSubscription { test }
    10 |         subscription SubscriptionTest { test }
    11 |
    12 |         fragment TestFragment on Test { id }
    13 |         fragment Test on Test { id }"
`;

exports[`Invalid #16 1`] = `
"#### ⌨️ Code

      1 |         {
      2 |           test {
      3 |             _badAlias: foo
      4 |             badAlias_: bar
      5 |             _ok
      6 |             ok_
      7 |           }
      8 |         }

#### ❌ Error 1/2

      2 |           test {
    > 3 |             _badAlias: foo
        |             ^^^^^^^^^ Leading underscores are not allowed
      4 |             badAlias_: bar

#### 💡 Suggestion: Rename to \`badAlias\`

    1 |         {
    2 |           test {
    3 |             badAlias: foo
    4 |             badAlias_: bar
    5 |             _ok
    6 |             ok_
    7 |           }
    8 |         }

#### ❌ Error 2/2

      3 |             _badAlias: foo
    > 4 |             badAlias_: bar
        |             ^^^^^^^^^ Trailing underscores are not allowed
      5 |             _ok

#### 💡 Suggestion: Rename to \`badAlias\`

    1 |         {
    2 |           test {
    3 |             _badAlias: foo
    4 |             badAlias: bar
    5 |             _ok
    6 |             ok_
    7 |           }
    8 |         }"
`;

exports[`Invalid #17 1`] = `
"#### ⌨️ Code

       1 |         scalar Secret
       2 |
       3 |         interface Snake {
       4 |           value: String!
       5 |         }
       6 |
       7 |         type Test {
       8 |           enabled: Boolean!
       9 |           secret: Secret!
      10 |           snake: Snake
      11 |         }

#### ⚙️ Options

    {
      "FieldDefinition[gqlType.gqlType.name.value=Boolean]": {
        "style": "camelCase",
        "requiredPrefixes": [
          "is",
          "has"
        ]
      },
      "FieldDefinition[gqlType.gqlType.name.value=Secret]": {
        "requiredPrefixes": [
          "SUPER_SECRET_"
        ]
      },
      "FieldDefinition[gqlType.name.value=Snake]": {
        "style": "snake_case",
        "requiredPrefixes": [
          "hiss"
        ]
      }
    }

#### ❌ Error 1/3

      7 |         type Test {
    > 8 |           enabled: Boolean!
        |           ^^^^^^^ Field "enabled" should have one of the following prefixes: is, has
      9 |           secret: Secret!

#### 💡 Suggestion 1/2: Rename to \`isEnabled\`

     1 |         scalar Secret
     2 |
     3 |         interface Snake {
     4 |           value: String!
     5 |         }
     6 |
     7 |         type Test {
     8 |           isEnabled: Boolean!
     9 |           secret: Secret!
    10 |           snake: Snake
    11 |         }

#### 💡 Suggestion 2/2: Rename to \`hasEnabled\`

     1 |         scalar Secret
     2 |
     3 |         interface Snake {
     4 |           value: String!
     5 |         }
     6 |
     7 |         type Test {
     8 |           hasEnabled: Boolean!
     9 |           secret: Secret!
    10 |           snake: Snake
    11 |         }

#### ❌ Error 2/3

       8 |           enabled: Boolean!
    >  9 |           secret: Secret!
         |           ^^^^^^ Field "secret" should have one of the following prefixes: SUPER_SECRET_
      10 |           snake: Snake

#### 💡 Suggestion: Rename to \`SUPER_SECRET_secret\`

     1 |         scalar Secret
     2 |
     3 |         interface Snake {
     4 |           value: String!
     5 |         }
     6 |
     7 |         type Test {
     8 |           enabled: Boolean!
     9 |           SUPER_SECRET_secret: Secret!
    10 |           snake: Snake
    11 |         }

#### ❌ Error 3/3

       9 |           secret: Secret!
    > 10 |           snake: Snake
         |           ^^^^^ Field "snake" should have one of the following prefixes: hiss
      11 |         }

#### 💡 Suggestion: Rename to \`hiss_snake\`

     1 |         scalar Secret
     2 |
     3 |         interface Snake {
     4 |           value: String!
     5 |         }
     6 |
     7 |         type Test {
     8 |           enabled: Boolean!
     9 |           secret: Secret!
    10 |           hiss_snake: Snake
    11 |         }"
`;

exports[`Invalid #18 1`] = `
"#### ⌨️ Code

      1 |         scalar IpAddress
      2 |
      3 |         type Test {
      4 |           specialFeature: Boolean!
      5 |           user: IpAddress!
      6 |         }

#### ⚙️ Options

    {
      "FieldDefinition[gqlType.gqlType.name.value=Boolean]": {
        "style": "camelCase",
        "requiredSuffixes": [
          "Enabled",
          "Disabled"
        ]
      },
      "FieldDefinition[gqlType.gqlType.name.value=IpAddress]": {
        "requiredSuffixes": [
          "IpAddress"
        ]
      }
    }

#### ❌ Error 1/2

      3 |         type Test {
    > 4 |           specialFeature: Boolean!
        |           ^^^^^^^^^^^^^^ Field "specialFeature" should have one of the following suffixes: Enabled, Disabled
      5 |           user: IpAddress!

#### 💡 Suggestion 1/2: Rename to \`specialFeatureEnabled\`

    1 |         scalar IpAddress
    2 |
    3 |         type Test {
    4 |           specialFeatureEnabled: Boolean!
    5 |           user: IpAddress!
    6 |         }

#### 💡 Suggestion 2/2: Rename to \`specialFeatureDisabled\`

    1 |         scalar IpAddress
    2 |
    3 |         type Test {
    4 |           specialFeatureDisabled: Boolean!
    5 |           user: IpAddress!
    6 |         }

#### ❌ Error 2/2

      4 |           specialFeature: Boolean!
    > 5 |           user: IpAddress!
        |           ^^^^ Field "user" should have one of the following suffixes: IpAddress
      6 |         }

#### 💡 Suggestion: Rename to \`userIpAddress\`

    1 |         scalar IpAddress
    2 |
    3 |         type Test {
    4 |           specialFeature: Boolean!
    5 |           userIpAddress: IpAddress!
    6 |         }"
`;
