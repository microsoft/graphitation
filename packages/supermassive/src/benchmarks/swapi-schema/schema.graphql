directive @defer(
  label: String
  if: Boolean! = true
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

directive @stream(
  label: String
  if: Boolean! = true
  initialCount: Int = 0
) on FIELD

union SearchResult =
    Person
  | Starship
  | Transport
  | Species
  | Vehicle
  | Planet
  | Film

enum NodeType {
  Person
  Starship
  Transport
  Species
  Vehicle
  Planet
  Film
}

type Subscription {
  emitPersons(limit: Int!, throwError: Boolean): Person
  nonNullWithError: String!
  nonNullWithErrorEvent: String!
  nonNullWithNull: String!
}

type Query {
  node(nodeType: NodeType!, id: Int!): Node
  search(search: String): [SearchResult]

  person(id: Int!): Person
  planet(id: Int!): Planet
  film(id: Int!): Film
  transport(id: Int!): Transport
  starship(id: Int!): Starship
  vehicle(id: Int!): Vehicle

  searchPeopleByName(search: String!): [Person]
  searchStarshipsByName(search: String!): [Starship]
  searchTransportsByName(search: String!): [Transport]
  searchSpeciesByName(search: String!): [Species]
  searchVehiclesByName(search: String!): [Vehicle]
  searchPlanetsByName(search: String!): [Planet]
  searchFilmsByTitle(search: String! = "The Empire Strikes Back"): [Film]

  allFilms: [Film]
  allStarships: [Starship]
  allPeople: [Person]
  allPlanets: [Planet]
  allSpecies: [Species]
  allTransports: [Transport]

  advancedDefaultInput(
    input: AdvancedInput! = { enumField: Transport, otherField: "Foo" }
  ): String
  multiArger(a: Int, b: String, c: AdvancedInput): String
  nonNullWithError: String!
  nonNullWithNull: String!
}

interface Node {
  id: Int
}

union Alive = Person | Species

type Film implements Node {
  title: String!
  starships: [Starship]
  edited: String
  vehicles: [Vehicle]
  planets: [Planet]
  producer: String
  created: String
  episode_id: Int
  director: String
  release_date: String
  opening_crawl: String
  characters: [Person]
  species: [Species]
  id: Int
}

type Vehicle implements Node {
  id: Int
  name: String
  vehicle_class: String
  pilots: [Person]
  edited: String
  consumables: String
  created: String
  model: String
  manufacturer: String
  image: String
  cargo_capacity: Int
  passengers: Int
  max_atmosphering_speed: Int
  crew: Int
  length: Float
  cost_in_credits: Int
}

type Person implements Node {
  id: Int
  edited: String
  name: String
  created: String
  gender: String
  skin_color: String
  hair_color: String
  height: Int
  eye_color: String
  mass: Int
  homeworld: Planet
  birth_year: String
  image: String
  vehicles: [Vehicle]
  starships: [Starship]
  films: [Film]
  bubblingError: String
  bubblingListError: [String!]
}

type Starship implements Node {
  id: Int

  films: [Film]
  pilots: [Person]

  MGLT: Int
  starship_class: String
  hyperdrive_rating: Float
  edited: String
  consumables: String
  name: String
  created: String
  cargo_capacity: Int
  passengers: Int
  max_atmosphering_speed: Int
  crew: String
  length: Int
  model: String
  cost_in_credits: Int
  manufacturer: String
  image: String
}

type Planet implements Node {
  id: Int
  edited: String
  climate: String
  surface_water: String
  name: String
  diameter: Int
  rotation_period: Int
  created: String
  terrain: String
  gravity: String
  orbital_period: Int
  population: Int
  residents: [Person]
  films: [Film]
}

type Species implements Node {
  edited: String
  classification: String
  name: String
  designation: String
  created: String
  eye_colors: String
  people: [Person]
  skin_colors: String
  language: String
  hair_colors: String
  homeworld: Planet
  average_lifespan: Int
  average_height: Int
  id: Int
}

type Transport implements Node {
  edited: String
  consumables: String
  name: String
  created: String
  cargo_capacity: Int
  passengers: Int
  max_atmosphering_speed: Int
  crew: String
  length: Int
  model: String
  cost_in_credits: Int
  manufacturer: String
  image: String
  id: Int
}

input AdvancedInput {
  enumField: NodeType!
  otherField: String!
}
