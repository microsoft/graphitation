directive @connection(key: String!, filter: [String]) on FIELD

type Query {
  conversation(id: String!): Conversation!
  node(id: ID!): Node
}

type Mutation {
  updateConversation(id: String!, title: String!): Conversation!
  createMessage(conversationId: String!): Message!
}

type Subscription {
  messageCreated(conversationId: String!): Message!
  conversationUpdated: Conversation!
}

interface Node {
  id: ID!
}

enum Sort {
  ASC
  DESC
}

type Conversation implements Node {
  id: ID!
  title: String!
  hasUnreadMessages: Boolean!
  messages(
    first: Int!
    after: String
    sort: Sort
    deferPresence: Boolean
  ): MessagesConnection!
}

type MessagesConnection {
  edges: [MessagesConnectionEdge!]!
  pageInfo: PageInfo
}

type PageInfo {
  startCursor: String
  endCursor: String
  hasNextPage: Boolean
  hasPreviousPage: Boolean
}

type MessagesConnectionEdge {
  cursor: String
  node: Message!
}

type Message {
  id: ID!
  authorId: String!
  text: String!
  createdAt: String!
}
